// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.3
// source: internal/proto/v1/goph_keeper_v1.proto

package v1_pd

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Register_Register_FullMethodName = "/goph_keeper_v1.Register/Register"
)

// RegisterClient is the client API for Register service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RegisterClient interface {
	Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
}

type registerClient struct {
	cc grpc.ClientConnInterface
}

func NewRegisterClient(cc grpc.ClientConnInterface) RegisterClient {
	return &registerClient{cc}
}

func (c *registerClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, Register_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RegisterServer is the server API for Register service.
// All implementations must embed UnimplementedRegisterServer
// for forward compatibility.
type RegisterServer interface {
	Register(context.Context, *RegisterRequest) (*RegisterResponse, error)
	mustEmbedUnimplementedRegisterServer()
}

// UnimplementedRegisterServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedRegisterServer struct{}

func (UnimplementedRegisterServer) Register(context.Context, *RegisterRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedRegisterServer) mustEmbedUnimplementedRegisterServer() {}
func (UnimplementedRegisterServer) testEmbeddedByValue()                  {}

// UnsafeRegisterServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RegisterServer will
// result in compilation errors.
type UnsafeRegisterServer interface {
	mustEmbedUnimplementedRegisterServer()
}

func RegisterRegisterServer(s grpc.ServiceRegistrar, srv RegisterServer) {
	// If the following call pancis, it indicates UnimplementedRegisterServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Register_ServiceDesc, srv)
}

func _Register_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RegisterServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Register_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RegisterServer).Register(ctx, req.(*RegisterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Register_ServiceDesc is the grpc.ServiceDesc for Register service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Register_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goph_keeper_v1.Register",
	HandlerType: (*RegisterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _Register_Register_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/v1/goph_keeper_v1.proto",
}

const (
	Auth_Auth_FullMethodName = "/goph_keeper_v1.Auth/Auth"
)

// AuthClient is the client API for Auth service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthClient interface {
	Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error)
}

type authClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthClient(cc grpc.ClientConnInterface) AuthClient {
	return &authClient{cc}
}

func (c *authClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AuthResponse)
	err := c.cc.Invoke(ctx, Auth_Auth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthServer is the server API for Auth service.
// All implementations must embed UnimplementedAuthServer
// for forward compatibility.
type AuthServer interface {
	Auth(context.Context, *AuthRequest) (*AuthResponse, error)
	mustEmbedUnimplementedAuthServer()
}

// UnimplementedAuthServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAuthServer struct{}

func (UnimplementedAuthServer) Auth(context.Context, *AuthRequest) (*AuthResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Auth not implemented")
}
func (UnimplementedAuthServer) mustEmbedUnimplementedAuthServer() {}
func (UnimplementedAuthServer) testEmbeddedByValue()              {}

// UnsafeAuthServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthServer will
// result in compilation errors.
type UnsafeAuthServer interface {
	mustEmbedUnimplementedAuthServer()
}

func RegisterAuthServer(s grpc.ServiceRegistrar, srv AuthServer) {
	// If the following call pancis, it indicates UnimplementedAuthServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Auth_ServiceDesc, srv)
}

func _Auth_Auth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthServer).Auth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Auth_Auth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthServer).Auth(ctx, req.(*AuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Auth_ServiceDesc is the grpc.ServiceDesc for Auth service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auth_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goph_keeper_v1.Auth",
	HandlerType: (*AuthServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Auth",
			Handler:    _Auth_Auth_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/v1/goph_keeper_v1.proto",
}

const (
	PostCredentials_PostLoginAndPassword_FullMethodName = "/goph_keeper_v1.PostCredentials/PostLoginAndPassword"
)

// PostCredentialsClient is the client API for PostCredentials service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostCredentialsClient interface {
	PostLoginAndPassword(ctx context.Context, in *PostLoginAndPasswordRequest, opts ...grpc.CallOption) (*Empty, error)
}

type postCredentialsClient struct {
	cc grpc.ClientConnInterface
}

func NewPostCredentialsClient(cc grpc.ClientConnInterface) PostCredentialsClient {
	return &postCredentialsClient{cc}
}

func (c *postCredentialsClient) PostLoginAndPassword(ctx context.Context, in *PostLoginAndPasswordRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PostCredentials_PostLoginAndPassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostCredentialsServer is the server API for PostCredentials service.
// All implementations must embed UnimplementedPostCredentialsServer
// for forward compatibility.
type PostCredentialsServer interface {
	PostLoginAndPassword(context.Context, *PostLoginAndPasswordRequest) (*Empty, error)
	mustEmbedUnimplementedPostCredentialsServer()
}

// UnimplementedPostCredentialsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostCredentialsServer struct{}

func (UnimplementedPostCredentialsServer) PostLoginAndPassword(context.Context, *PostLoginAndPasswordRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostLoginAndPassword not implemented")
}
func (UnimplementedPostCredentialsServer) mustEmbedUnimplementedPostCredentialsServer() {}
func (UnimplementedPostCredentialsServer) testEmbeddedByValue()                         {}

// UnsafePostCredentialsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostCredentialsServer will
// result in compilation errors.
type UnsafePostCredentialsServer interface {
	mustEmbedUnimplementedPostCredentialsServer()
}

func RegisterPostCredentialsServer(s grpc.ServiceRegistrar, srv PostCredentialsServer) {
	// If the following call pancis, it indicates UnimplementedPostCredentialsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PostCredentials_ServiceDesc, srv)
}

func _PostCredentials_PostLoginAndPassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostLoginAndPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostCredentialsServer).PostLoginAndPassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostCredentials_PostLoginAndPassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostCredentialsServer).PostLoginAndPassword(ctx, req.(*PostLoginAndPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostCredentials_ServiceDesc is the grpc.ServiceDesc for PostCredentials service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostCredentials_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goph_keeper_v1.PostCredentials",
	HandlerType: (*PostCredentialsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostLoginAndPassword",
			Handler:    _PostCredentials_PostLoginAndPassword_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/v1/goph_keeper_v1.proto",
}

const (
	PostTextData_PostTextData_FullMethodName = "/goph_keeper_v1.PostTextData/PostTextData"
)

// PostTextDataClient is the client API for PostTextData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostTextDataClient interface {
	PostTextData(ctx context.Context, in *PostTextDataRequest, opts ...grpc.CallOption) (*Empty, error)
}

type postTextDataClient struct {
	cc grpc.ClientConnInterface
}

func NewPostTextDataClient(cc grpc.ClientConnInterface) PostTextDataClient {
	return &postTextDataClient{cc}
}

func (c *postTextDataClient) PostTextData(ctx context.Context, in *PostTextDataRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PostTextData_PostTextData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostTextDataServer is the server API for PostTextData service.
// All implementations must embed UnimplementedPostTextDataServer
// for forward compatibility.
type PostTextDataServer interface {
	PostTextData(context.Context, *PostTextDataRequest) (*Empty, error)
	mustEmbedUnimplementedPostTextDataServer()
}

// UnimplementedPostTextDataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostTextDataServer struct{}

func (UnimplementedPostTextDataServer) PostTextData(context.Context, *PostTextDataRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostTextData not implemented")
}
func (UnimplementedPostTextDataServer) mustEmbedUnimplementedPostTextDataServer() {}
func (UnimplementedPostTextDataServer) testEmbeddedByValue()                      {}

// UnsafePostTextDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostTextDataServer will
// result in compilation errors.
type UnsafePostTextDataServer interface {
	mustEmbedUnimplementedPostTextDataServer()
}

func RegisterPostTextDataServer(s grpc.ServiceRegistrar, srv PostTextDataServer) {
	// If the following call pancis, it indicates UnimplementedPostTextDataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PostTextData_ServiceDesc, srv)
}

func _PostTextData_PostTextData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostTextDataServer).PostTextData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostTextData_PostTextData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostTextDataServer).PostTextData(ctx, req.(*PostTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostTextData_ServiceDesc is the grpc.ServiceDesc for PostTextData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostTextData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goph_keeper_v1.PostTextData",
	HandlerType: (*PostTextDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostTextData",
			Handler:    _PostTextData_PostTextData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/v1/goph_keeper_v1.proto",
}

const (
	PostBinaryData_PostBinaryData_FullMethodName = "/goph_keeper_v1.PostBinaryData/PostBinaryData"
)

// PostBinaryDataClient is the client API for PostBinaryData service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostBinaryDataClient interface {
	PostBinaryData(ctx context.Context, in *PostTextDataRequest, opts ...grpc.CallOption) (*Empty, error)
}

type postBinaryDataClient struct {
	cc grpc.ClientConnInterface
}

func NewPostBinaryDataClient(cc grpc.ClientConnInterface) PostBinaryDataClient {
	return &postBinaryDataClient{cc}
}

func (c *postBinaryDataClient) PostBinaryData(ctx context.Context, in *PostTextDataRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PostBinaryData_PostBinaryData_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostBinaryDataServer is the server API for PostBinaryData service.
// All implementations must embed UnimplementedPostBinaryDataServer
// for forward compatibility.
type PostBinaryDataServer interface {
	PostBinaryData(context.Context, *PostTextDataRequest) (*Empty, error)
	mustEmbedUnimplementedPostBinaryDataServer()
}

// UnimplementedPostBinaryDataServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostBinaryDataServer struct{}

func (UnimplementedPostBinaryDataServer) PostBinaryData(context.Context, *PostTextDataRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostBinaryData not implemented")
}
func (UnimplementedPostBinaryDataServer) mustEmbedUnimplementedPostBinaryDataServer() {}
func (UnimplementedPostBinaryDataServer) testEmbeddedByValue()                        {}

// UnsafePostBinaryDataServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostBinaryDataServer will
// result in compilation errors.
type UnsafePostBinaryDataServer interface {
	mustEmbedUnimplementedPostBinaryDataServer()
}

func RegisterPostBinaryDataServer(s grpc.ServiceRegistrar, srv PostBinaryDataServer) {
	// If the following call pancis, it indicates UnimplementedPostBinaryDataServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PostBinaryData_ServiceDesc, srv)
}

func _PostBinaryData_PostBinaryData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostBinaryDataServer).PostBinaryData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostBinaryData_PostBinaryData_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostBinaryDataServer).PostBinaryData(ctx, req.(*PostTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostBinaryData_ServiceDesc is the grpc.ServiceDesc for PostBinaryData service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostBinaryData_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goph_keeper_v1.PostBinaryData",
	HandlerType: (*PostBinaryDataServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostBinaryData",
			Handler:    _PostBinaryData_PostBinaryData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/v1/goph_keeper_v1.proto",
}

const (
	PostCards_PostCards_FullMethodName = "/goph_keeper_v1.PostCards/PostCards"
)

// PostCardsClient is the client API for PostCards service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PostCardsClient interface {
	PostCards(ctx context.Context, in *PostTextDataRequest, opts ...grpc.CallOption) (*Empty, error)
}

type postCardsClient struct {
	cc grpc.ClientConnInterface
}

func NewPostCardsClient(cc grpc.ClientConnInterface) PostCardsClient {
	return &postCardsClient{cc}
}

func (c *postCardsClient) PostCards(ctx context.Context, in *PostTextDataRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, PostCards_PostCards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PostCardsServer is the server API for PostCards service.
// All implementations must embed UnimplementedPostCardsServer
// for forward compatibility.
type PostCardsServer interface {
	PostCards(context.Context, *PostTextDataRequest) (*Empty, error)
	mustEmbedUnimplementedPostCardsServer()
}

// UnimplementedPostCardsServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPostCardsServer struct{}

func (UnimplementedPostCardsServer) PostCards(context.Context, *PostTextDataRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PostCards not implemented")
}
func (UnimplementedPostCardsServer) mustEmbedUnimplementedPostCardsServer() {}
func (UnimplementedPostCardsServer) testEmbeddedByValue()                   {}

// UnsafePostCardsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PostCardsServer will
// result in compilation errors.
type UnsafePostCardsServer interface {
	mustEmbedUnimplementedPostCardsServer()
}

func RegisterPostCardsServer(s grpc.ServiceRegistrar, srv PostCardsServer) {
	// If the following call pancis, it indicates UnimplementedPostCardsServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PostCards_ServiceDesc, srv)
}

func _PostCards_PostCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PostTextDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PostCardsServer).PostCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PostCards_PostCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PostCardsServer).PostCards(ctx, req.(*PostTextDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PostCards_ServiceDesc is the grpc.ServiceDesc for PostCards service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PostCards_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "goph_keeper_v1.PostCards",
	HandlerType: (*PostCardsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PostCards",
			Handler:    _PostCards_PostCards_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/proto/v1/goph_keeper_v1.proto",
}

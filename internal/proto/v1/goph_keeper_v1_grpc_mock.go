// Code generated by MockGen. DO NOT EDIT.
// Source: goph_keeper_v1_grpc.pb.go

// Package v1_pd is a generated GoMock package.
package v1_pd

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// MockRegisterClient is a mock of RegisterClient interface.
type MockRegisterClient struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterClientMockRecorder
}

// MockRegisterClientMockRecorder is the mock recorder for MockRegisterClient.
type MockRegisterClientMockRecorder struct {
	mock *MockRegisterClient
}

// NewMockRegisterClient creates a new mock instance.
func NewMockRegisterClient(ctrl *gomock.Controller) *MockRegisterClient {
	mock := &MockRegisterClient{ctrl: ctrl}
	mock.recorder = &MockRegisterClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterClient) EXPECT() *MockRegisterClientMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegisterClient) Register(ctx context.Context, in *RegisterRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Register", varargs...)
	ret0, _ := ret[0].(*RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRegisterClientMockRecorder) Register(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegisterClient)(nil).Register), varargs...)
}

// MockRegisterServer is a mock of RegisterServer interface.
type MockRegisterServer struct {
	ctrl     *gomock.Controller
	recorder *MockRegisterServerMockRecorder
}

// MockRegisterServerMockRecorder is the mock recorder for MockRegisterServer.
type MockRegisterServerMockRecorder struct {
	mock *MockRegisterServer
}

// NewMockRegisterServer creates a new mock instance.
func NewMockRegisterServer(ctrl *gomock.Controller) *MockRegisterServer {
	mock := &MockRegisterServer{ctrl: ctrl}
	mock.recorder = &MockRegisterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRegisterServer) EXPECT() *MockRegisterServerMockRecorder {
	return m.recorder
}

// Register mocks base method.
func (m *MockRegisterServer) Register(arg0 context.Context, arg1 *RegisterRequest) (*RegisterResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Register", arg0, arg1)
	ret0, _ := ret[0].(*RegisterResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Register indicates an expected call of Register.
func (mr *MockRegisterServerMockRecorder) Register(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Register", reflect.TypeOf((*MockRegisterServer)(nil).Register), arg0, arg1)
}

// mustEmbedUnimplementedRegisterServer mocks base method.
func (m *MockRegisterServer) mustEmbedUnimplementedRegisterServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRegisterServer")
}

// mustEmbedUnimplementedRegisterServer indicates an expected call of mustEmbedUnimplementedRegisterServer.
func (mr *MockRegisterServerMockRecorder) mustEmbedUnimplementedRegisterServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRegisterServer", reflect.TypeOf((*MockRegisterServer)(nil).mustEmbedUnimplementedRegisterServer))
}

// MockUnsafeRegisterServer is a mock of UnsafeRegisterServer interface.
type MockUnsafeRegisterServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeRegisterServerMockRecorder
}

// MockUnsafeRegisterServerMockRecorder is the mock recorder for MockUnsafeRegisterServer.
type MockUnsafeRegisterServerMockRecorder struct {
	mock *MockUnsafeRegisterServer
}

// NewMockUnsafeRegisterServer creates a new mock instance.
func NewMockUnsafeRegisterServer(ctrl *gomock.Controller) *MockUnsafeRegisterServer {
	mock := &MockUnsafeRegisterServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeRegisterServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeRegisterServer) EXPECT() *MockUnsafeRegisterServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedRegisterServer mocks base method.
func (m *MockUnsafeRegisterServer) mustEmbedUnimplementedRegisterServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedRegisterServer")
}

// mustEmbedUnimplementedRegisterServer indicates an expected call of mustEmbedUnimplementedRegisterServer.
func (mr *MockUnsafeRegisterServerMockRecorder) mustEmbedUnimplementedRegisterServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedRegisterServer", reflect.TypeOf((*MockUnsafeRegisterServer)(nil).mustEmbedUnimplementedRegisterServer))
}

// MockAuthClient is a mock of AuthClient interface.
type MockAuthClient struct {
	ctrl     *gomock.Controller
	recorder *MockAuthClientMockRecorder
}

// MockAuthClientMockRecorder is the mock recorder for MockAuthClient.
type MockAuthClientMockRecorder struct {
	mock *MockAuthClient
}

// NewMockAuthClient creates a new mock instance.
func NewMockAuthClient(ctrl *gomock.Controller) *MockAuthClient {
	mock := &MockAuthClient{ctrl: ctrl}
	mock.recorder = &MockAuthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthClient) EXPECT() *MockAuthClientMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockAuthClient) Auth(ctx context.Context, in *AuthRequest, opts ...grpc.CallOption) (*AuthResponse, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Auth", varargs...)
	ret0, _ := ret[0].(*AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockAuthClientMockRecorder) Auth(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockAuthClient)(nil).Auth), varargs...)
}

// MockAuthServer is a mock of AuthServer interface.
type MockAuthServer struct {
	ctrl     *gomock.Controller
	recorder *MockAuthServerMockRecorder
}

// MockAuthServerMockRecorder is the mock recorder for MockAuthServer.
type MockAuthServerMockRecorder struct {
	mock *MockAuthServer
}

// NewMockAuthServer creates a new mock instance.
func NewMockAuthServer(ctrl *gomock.Controller) *MockAuthServer {
	mock := &MockAuthServer{ctrl: ctrl}
	mock.recorder = &MockAuthServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthServer) EXPECT() *MockAuthServerMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockAuthServer) Auth(arg0 context.Context, arg1 *AuthRequest) (*AuthResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", arg0, arg1)
	ret0, _ := ret[0].(*AuthResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockAuthServerMockRecorder) Auth(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockAuthServer)(nil).Auth), arg0, arg1)
}

// mustEmbedUnimplementedAuthServer mocks base method.
func (m *MockAuthServer) mustEmbedUnimplementedAuthServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServer")
}

// mustEmbedUnimplementedAuthServer indicates an expected call of mustEmbedUnimplementedAuthServer.
func (mr *MockAuthServerMockRecorder) mustEmbedUnimplementedAuthServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServer", reflect.TypeOf((*MockAuthServer)(nil).mustEmbedUnimplementedAuthServer))
}

// MockUnsafeAuthServer is a mock of UnsafeAuthServer interface.
type MockUnsafeAuthServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeAuthServerMockRecorder
}

// MockUnsafeAuthServerMockRecorder is the mock recorder for MockUnsafeAuthServer.
type MockUnsafeAuthServerMockRecorder struct {
	mock *MockUnsafeAuthServer
}

// NewMockUnsafeAuthServer creates a new mock instance.
func NewMockUnsafeAuthServer(ctrl *gomock.Controller) *MockUnsafeAuthServer {
	mock := &MockUnsafeAuthServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeAuthServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeAuthServer) EXPECT() *MockUnsafeAuthServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedAuthServer mocks base method.
func (m *MockUnsafeAuthServer) mustEmbedUnimplementedAuthServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedAuthServer")
}

// mustEmbedUnimplementedAuthServer indicates an expected call of mustEmbedUnimplementedAuthServer.
func (mr *MockUnsafeAuthServerMockRecorder) mustEmbedUnimplementedAuthServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedAuthServer", reflect.TypeOf((*MockUnsafeAuthServer)(nil).mustEmbedUnimplementedAuthServer))
}

// MockHealthClient is a mock of HealthClient interface.
type MockHealthClient struct {
	ctrl     *gomock.Controller
	recorder *MockHealthClientMockRecorder
}

// MockHealthClientMockRecorder is the mock recorder for MockHealthClient.
type MockHealthClientMockRecorder struct {
	mock *MockHealthClient
}

// NewMockHealthClient creates a new mock instance.
func NewMockHealthClient(ctrl *gomock.Controller) *MockHealthClient {
	mock := &MockHealthClient{ctrl: ctrl}
	mock.recorder = &MockHealthClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthClient) EXPECT() *MockHealthClientMockRecorder {
	return m.recorder
}

// Health mocks base method.
func (m *MockHealthClient) Health(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Health", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockHealthClientMockRecorder) Health(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockHealthClient)(nil).Health), varargs...)
}

// MockHealthServer is a mock of HealthServer interface.
type MockHealthServer struct {
	ctrl     *gomock.Controller
	recorder *MockHealthServerMockRecorder
}

// MockHealthServerMockRecorder is the mock recorder for MockHealthServer.
type MockHealthServerMockRecorder struct {
	mock *MockHealthServer
}

// NewMockHealthServer creates a new mock instance.
func NewMockHealthServer(ctrl *gomock.Controller) *MockHealthServer {
	mock := &MockHealthServer{ctrl: ctrl}
	mock.recorder = &MockHealthServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthServer) EXPECT() *MockHealthServerMockRecorder {
	return m.recorder
}

// Health mocks base method.
func (m *MockHealthServer) Health(arg0 context.Context, arg1 *Empty) (*Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Health", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Health indicates an expected call of Health.
func (mr *MockHealthServerMockRecorder) Health(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Health", reflect.TypeOf((*MockHealthServer)(nil).Health), arg0, arg1)
}

// mustEmbedUnimplementedHealthServer mocks base method.
func (m *MockHealthServer) mustEmbedUnimplementedHealthServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHealthServer")
}

// mustEmbedUnimplementedHealthServer indicates an expected call of mustEmbedUnimplementedHealthServer.
func (mr *MockHealthServerMockRecorder) mustEmbedUnimplementedHealthServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHealthServer", reflect.TypeOf((*MockHealthServer)(nil).mustEmbedUnimplementedHealthServer))
}

// MockUnsafeHealthServer is a mock of UnsafeHealthServer interface.
type MockUnsafeHealthServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeHealthServerMockRecorder
}

// MockUnsafeHealthServerMockRecorder is the mock recorder for MockUnsafeHealthServer.
type MockUnsafeHealthServerMockRecorder struct {
	mock *MockUnsafeHealthServer
}

// NewMockUnsafeHealthServer creates a new mock instance.
func NewMockUnsafeHealthServer(ctrl *gomock.Controller) *MockUnsafeHealthServer {
	mock := &MockUnsafeHealthServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeHealthServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeHealthServer) EXPECT() *MockUnsafeHealthServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedHealthServer mocks base method.
func (m *MockUnsafeHealthServer) mustEmbedUnimplementedHealthServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedHealthServer")
}

// mustEmbedUnimplementedHealthServer indicates an expected call of mustEmbedUnimplementedHealthServer.
func (mr *MockUnsafeHealthServerMockRecorder) mustEmbedUnimplementedHealthServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedHealthServer", reflect.TypeOf((*MockUnsafeHealthServer)(nil).mustEmbedUnimplementedHealthServer))
}

// MockSyncFromClientClient is a mock of SyncFromClientClient interface.
type MockSyncFromClientClient struct {
	ctrl     *gomock.Controller
	recorder *MockSyncFromClientClientMockRecorder
}

// MockSyncFromClientClientMockRecorder is the mock recorder for MockSyncFromClientClient.
type MockSyncFromClientClientMockRecorder struct {
	mock *MockSyncFromClientClient
}

// NewMockSyncFromClientClient creates a new mock instance.
func NewMockSyncFromClientClient(ctrl *gomock.Controller) *MockSyncFromClientClient {
	mock := &MockSyncFromClientClient{ctrl: ctrl}
	mock.recorder = &MockSyncFromClientClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncFromClientClient) EXPECT() *MockSyncFromClientClientMockRecorder {
	return m.recorder
}

// SyncFromClientBinaryData mocks base method.
func (m *MockSyncFromClientClient) SyncFromClientBinaryData(ctx context.Context, in *SyncFromClientBinaryDataRequest, opts ...grpc.CallOption) (*Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncFromClientBinaryData", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncFromClientBinaryData indicates an expected call of SyncFromClientBinaryData.
func (mr *MockSyncFromClientClientMockRecorder) SyncFromClientBinaryData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncFromClientBinaryData", reflect.TypeOf((*MockSyncFromClientClient)(nil).SyncFromClientBinaryData), varargs...)
}

// SyncFromClientCards mocks base method.
func (m *MockSyncFromClientClient) SyncFromClientCards(ctx context.Context, in *SyncFromClientCardsRequest, opts ...grpc.CallOption) (*Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncFromClientCards", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncFromClientCards indicates an expected call of SyncFromClientCards.
func (mr *MockSyncFromClientClientMockRecorder) SyncFromClientCards(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncFromClientCards", reflect.TypeOf((*MockSyncFromClientClient)(nil).SyncFromClientCards), varargs...)
}

// SyncFromClientCredentials mocks base method.
func (m *MockSyncFromClientClient) SyncFromClientCredentials(ctx context.Context, in *SyncFromClientCredentialsRequest, opts ...grpc.CallOption) (*Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncFromClientCredentials", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncFromClientCredentials indicates an expected call of SyncFromClientCredentials.
func (mr *MockSyncFromClientClientMockRecorder) SyncFromClientCredentials(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncFromClientCredentials", reflect.TypeOf((*MockSyncFromClientClient)(nil).SyncFromClientCredentials), varargs...)
}

// SyncFromClientTextData mocks base method.
func (m *MockSyncFromClientClient) SyncFromClientTextData(ctx context.Context, in *SyncFromClientTextDataRequest, opts ...grpc.CallOption) (*Empty, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, in}
	for _, a := range opts {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "SyncFromClientTextData", varargs...)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncFromClientTextData indicates an expected call of SyncFromClientTextData.
func (mr *MockSyncFromClientClientMockRecorder) SyncFromClientTextData(ctx, in interface{}, opts ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, in}, opts...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncFromClientTextData", reflect.TypeOf((*MockSyncFromClientClient)(nil).SyncFromClientTextData), varargs...)
}

// MockSyncFromClientServer is a mock of SyncFromClientServer interface.
type MockSyncFromClientServer struct {
	ctrl     *gomock.Controller
	recorder *MockSyncFromClientServerMockRecorder
}

// MockSyncFromClientServerMockRecorder is the mock recorder for MockSyncFromClientServer.
type MockSyncFromClientServerMockRecorder struct {
	mock *MockSyncFromClientServer
}

// NewMockSyncFromClientServer creates a new mock instance.
func NewMockSyncFromClientServer(ctrl *gomock.Controller) *MockSyncFromClientServer {
	mock := &MockSyncFromClientServer{ctrl: ctrl}
	mock.recorder = &MockSyncFromClientServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSyncFromClientServer) EXPECT() *MockSyncFromClientServerMockRecorder {
	return m.recorder
}

// SyncFromClientBinaryData mocks base method.
func (m *MockSyncFromClientServer) SyncFromClientBinaryData(arg0 context.Context, arg1 *SyncFromClientBinaryDataRequest) (*Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncFromClientBinaryData", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncFromClientBinaryData indicates an expected call of SyncFromClientBinaryData.
func (mr *MockSyncFromClientServerMockRecorder) SyncFromClientBinaryData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncFromClientBinaryData", reflect.TypeOf((*MockSyncFromClientServer)(nil).SyncFromClientBinaryData), arg0, arg1)
}

// SyncFromClientCards mocks base method.
func (m *MockSyncFromClientServer) SyncFromClientCards(arg0 context.Context, arg1 *SyncFromClientCardsRequest) (*Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncFromClientCards", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncFromClientCards indicates an expected call of SyncFromClientCards.
func (mr *MockSyncFromClientServerMockRecorder) SyncFromClientCards(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncFromClientCards", reflect.TypeOf((*MockSyncFromClientServer)(nil).SyncFromClientCards), arg0, arg1)
}

// SyncFromClientCredentials mocks base method.
func (m *MockSyncFromClientServer) SyncFromClientCredentials(arg0 context.Context, arg1 *SyncFromClientCredentialsRequest) (*Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncFromClientCredentials", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncFromClientCredentials indicates an expected call of SyncFromClientCredentials.
func (mr *MockSyncFromClientServerMockRecorder) SyncFromClientCredentials(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncFromClientCredentials", reflect.TypeOf((*MockSyncFromClientServer)(nil).SyncFromClientCredentials), arg0, arg1)
}

// SyncFromClientTextData mocks base method.
func (m *MockSyncFromClientServer) SyncFromClientTextData(arg0 context.Context, arg1 *SyncFromClientTextDataRequest) (*Empty, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncFromClientTextData", arg0, arg1)
	ret0, _ := ret[0].(*Empty)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SyncFromClientTextData indicates an expected call of SyncFromClientTextData.
func (mr *MockSyncFromClientServerMockRecorder) SyncFromClientTextData(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncFromClientTextData", reflect.TypeOf((*MockSyncFromClientServer)(nil).SyncFromClientTextData), arg0, arg1)
}

// mustEmbedUnimplementedSyncFromClientServer mocks base method.
func (m *MockSyncFromClientServer) mustEmbedUnimplementedSyncFromClientServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSyncFromClientServer")
}

// mustEmbedUnimplementedSyncFromClientServer indicates an expected call of mustEmbedUnimplementedSyncFromClientServer.
func (mr *MockSyncFromClientServerMockRecorder) mustEmbedUnimplementedSyncFromClientServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSyncFromClientServer", reflect.TypeOf((*MockSyncFromClientServer)(nil).mustEmbedUnimplementedSyncFromClientServer))
}

// MockUnsafeSyncFromClientServer is a mock of UnsafeSyncFromClientServer interface.
type MockUnsafeSyncFromClientServer struct {
	ctrl     *gomock.Controller
	recorder *MockUnsafeSyncFromClientServerMockRecorder
}

// MockUnsafeSyncFromClientServerMockRecorder is the mock recorder for MockUnsafeSyncFromClientServer.
type MockUnsafeSyncFromClientServerMockRecorder struct {
	mock *MockUnsafeSyncFromClientServer
}

// NewMockUnsafeSyncFromClientServer creates a new mock instance.
func NewMockUnsafeSyncFromClientServer(ctrl *gomock.Controller) *MockUnsafeSyncFromClientServer {
	mock := &MockUnsafeSyncFromClientServer{ctrl: ctrl}
	mock.recorder = &MockUnsafeSyncFromClientServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUnsafeSyncFromClientServer) EXPECT() *MockUnsafeSyncFromClientServerMockRecorder {
	return m.recorder
}

// mustEmbedUnimplementedSyncFromClientServer mocks base method.
func (m *MockUnsafeSyncFromClientServer) mustEmbedUnimplementedSyncFromClientServer() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "mustEmbedUnimplementedSyncFromClientServer")
}

// mustEmbedUnimplementedSyncFromClientServer indicates an expected call of mustEmbedUnimplementedSyncFromClientServer.
func (mr *MockUnsafeSyncFromClientServerMockRecorder) mustEmbedUnimplementedSyncFromClientServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "mustEmbedUnimplementedSyncFromClientServer", reflect.TypeOf((*MockUnsafeSyncFromClientServer)(nil).mustEmbedUnimplementedSyncFromClientServer))
}

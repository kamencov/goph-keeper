// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package auth is a generated GoMock package.
package auth

import (
	auth "goph-keeper/internal/services/server/auth"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockserviceAuth is a mock of serviceAuth interface.
type MockserviceAuth struct {
	ctrl     *gomock.Controller
	recorder *MockserviceAuthMockRecorder
}

// MockserviceAuthMockRecorder is the mock recorder for MockserviceAuth.
type MockserviceAuthMockRecorder struct {
	mock *MockserviceAuth
}

// NewMockserviceAuth creates a new mock instance.
func NewMockserviceAuth(ctrl *gomock.Controller) *MockserviceAuth {
	mock := &MockserviceAuth{ctrl: ctrl}
	mock.recorder = &MockserviceAuthMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserviceAuth) EXPECT() *MockserviceAuthMockRecorder {
	return m.recorder
}

// Auth mocks base method.
func (m *MockserviceAuth) Auth(login, password string) (auth.Tokens, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth", login, password)
	ret0, _ := ret[0].(auth.Tokens)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Auth indicates an expected call of Auth.
func (mr *MockserviceAuthMockRecorder) Auth(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockserviceAuth)(nil).Auth), login, password)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package sync is a generated GoMock package.
package sync

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockserviceCred is a mock of serviceCred interface.
type MockserviceCred struct {
	ctrl     *gomock.Controller
	recorder *MockserviceCredMockRecorder
}

// MockserviceCredMockRecorder is the mock recorder for MockserviceCred.
type MockserviceCredMockRecorder struct {
	mock *MockserviceCred
}

// NewMockserviceCred creates a new mock instance.
func NewMockserviceCred(ctrl *gomock.Controller) *MockserviceCred {
	mock := &MockserviceCred{ctrl: ctrl}
	mock.recorder = &MockserviceCredMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserviceCred) EXPECT() *MockserviceCredMockRecorder {
	return m.recorder
}

// SyncDelCredentials mocks base method.
func (m *MockserviceCred) SyncDelCredentials(ctx context.Context, accessToken, resource string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncDelCredentials", ctx, accessToken, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncDelCredentials indicates an expected call of SyncDelCredentials.
func (mr *MockserviceCredMockRecorder) SyncDelCredentials(ctx, accessToken, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncDelCredentials", reflect.TypeOf((*MockserviceCred)(nil).SyncDelCredentials), ctx, accessToken, resource)
}

// SyncSaveCredentials mocks base method.
func (m *MockserviceCred) SyncSaveCredentials(ctx context.Context, accessToken, resource, login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncSaveCredentials", ctx, accessToken, resource, login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncSaveCredentials indicates an expected call of SyncSaveCredentials.
func (mr *MockserviceCredMockRecorder) SyncSaveCredentials(ctx, accessToken, resource, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncSaveCredentials", reflect.TypeOf((*MockserviceCred)(nil).SyncSaveCredentials), ctx, accessToken, resource, login, password)
}

// MockserviceTextData is a mock of serviceTextData interface.
type MockserviceTextData struct {
	ctrl     *gomock.Controller
	recorder *MockserviceTextDataMockRecorder
}

// MockserviceTextDataMockRecorder is the mock recorder for MockserviceTextData.
type MockserviceTextDataMockRecorder struct {
	mock *MockserviceTextData
}

// NewMockserviceTextData creates a new mock instance.
func NewMockserviceTextData(ctrl *gomock.Controller) *MockserviceTextData {
	mock := &MockserviceTextData{ctrl: ctrl}
	mock.recorder = &MockserviceTextDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserviceTextData) EXPECT() *MockserviceTextDataMockRecorder {
	return m.recorder
}

// SyncDelText mocks base method.
func (m *MockserviceTextData) SyncDelText(ctx context.Context, accessToken, resource string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncDelText", ctx, accessToken, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncDelText indicates an expected call of SyncDelText.
func (mr *MockserviceTextDataMockRecorder) SyncDelText(ctx, accessToken, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncDelText", reflect.TypeOf((*MockserviceTextData)(nil).SyncDelText), ctx, accessToken, resource)
}

// SyncSaveText mocks base method.
func (m *MockserviceTextData) SyncSaveText(ctx context.Context, accessToken, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncSaveText", ctx, accessToken, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncSaveText indicates an expected call of SyncSaveText.
func (mr *MockserviceTextDataMockRecorder) SyncSaveText(ctx, accessToken, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncSaveText", reflect.TypeOf((*MockserviceTextData)(nil).SyncSaveText), ctx, accessToken, data)
}

// MockserviceBinaryData is a mock of serviceBinaryData interface.
type MockserviceBinaryData struct {
	ctrl     *gomock.Controller
	recorder *MockserviceBinaryDataMockRecorder
}

// MockserviceBinaryDataMockRecorder is the mock recorder for MockserviceBinaryData.
type MockserviceBinaryDataMockRecorder struct {
	mock *MockserviceBinaryData
}

// NewMockserviceBinaryData creates a new mock instance.
func NewMockserviceBinaryData(ctrl *gomock.Controller) *MockserviceBinaryData {
	mock := &MockserviceBinaryData{ctrl: ctrl}
	mock.recorder = &MockserviceBinaryDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserviceBinaryData) EXPECT() *MockserviceBinaryDataMockRecorder {
	return m.recorder
}

// SyncDelBinary mocks base method.
func (m *MockserviceBinaryData) SyncDelBinary(ctx context.Context, accessToken, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncDelBinary", ctx, accessToken, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncDelBinary indicates an expected call of SyncDelBinary.
func (mr *MockserviceBinaryDataMockRecorder) SyncDelBinary(ctx, accessToken, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncDelBinary", reflect.TypeOf((*MockserviceBinaryData)(nil).SyncDelBinary), ctx, accessToken, data)
}

// SyncSaveBinary mocks base method.
func (m *MockserviceBinaryData) SyncSaveBinary(ctx context.Context, accessToken, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncSaveBinary", ctx, accessToken, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncSaveBinary indicates an expected call of SyncSaveBinary.
func (mr *MockserviceBinaryDataMockRecorder) SyncSaveBinary(ctx, accessToken, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncSaveBinary", reflect.TypeOf((*MockserviceBinaryData)(nil).SyncSaveBinary), ctx, accessToken, data)
}

// MockserviceCards is a mock of serviceCards interface.
type MockserviceCards struct {
	ctrl     *gomock.Controller
	recorder *MockserviceCardsMockRecorder
}

// MockserviceCardsMockRecorder is the mock recorder for MockserviceCards.
type MockserviceCardsMockRecorder struct {
	mock *MockserviceCards
}

// NewMockserviceCards creates a new mock instance.
func NewMockserviceCards(ctrl *gomock.Controller) *MockserviceCards {
	mock := &MockserviceCards{ctrl: ctrl}
	mock.recorder = &MockserviceCardsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserviceCards) EXPECT() *MockserviceCardsMockRecorder {
	return m.recorder
}

// SyncDelBinary mocks base method.
func (m *MockserviceCards) SyncDelBinary(ctx context.Context, accessToken, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncDelBinary", ctx, accessToken, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncDelBinary indicates an expected call of SyncDelBinary.
func (mr *MockserviceCardsMockRecorder) SyncDelBinary(ctx, accessToken, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncDelBinary", reflect.TypeOf((*MockserviceCards)(nil).SyncDelBinary), ctx, accessToken, data)
}

// SyncSaveCards mocks base method.
func (m *MockserviceCards) SyncSaveCards(ctx context.Context, accessToken, cards string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncSaveCards", ctx, accessToken, cards)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncSaveCards indicates an expected call of SyncSaveCards.
func (mr *MockserviceCardsMockRecorder) SyncSaveCards(ctx, accessToken, cards interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncSaveCards", reflect.TypeOf((*MockserviceCards)(nil).SyncSaveCards), ctx, accessToken, cards)
}

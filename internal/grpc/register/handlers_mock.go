// Code generated by MockGen. DO NOT EDIT.
// Source: repositories.go

// Package register is a generated GoMock package.
package register

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockserviceRegister is a mock of serviceRegister interface.
type MockserviceRegister struct {
	ctrl     *gomock.Controller
	recorder *MockserviceRegisterMockRecorder
}

// MockserviceRegisterMockRecorder is the mock recorder for MockserviceRegister.
type MockserviceRegisterMockRecorder struct {
	mock *MockserviceRegister
}

// NewMockserviceRegister creates a new mock instance.
func NewMockserviceRegister(ctrl *gomock.Controller) *MockserviceRegister {
	mock := &MockserviceRegister{ctrl: ctrl}
	mock.recorder = &MockserviceRegisterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserviceRegister) EXPECT() *MockserviceRegisterMockRecorder {
	return m.recorder
}

// RegisterUser mocks base method.
func (m *MockserviceRegister) RegisterUser(ctx context.Context, login, password string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegisterUser", ctx, login, password)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RegisterUser indicates an expected call of RegisterUser.
func (mr *MockserviceRegisterMockRecorder) RegisterUser(ctx, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterUser", reflect.TypeOf((*MockserviceRegister)(nil).RegisterUser), ctx, login, password)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package workers is a generated GoMock package.
package workers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	grpc "google.golang.org/grpc"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// ClearSyncBinaryData mocks base method.
func (m *Mockstorage) ClearSyncBinaryData() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearSyncBinaryData")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearSyncBinaryData indicates an expected call of ClearSyncBinaryData.
func (mr *MockstorageMockRecorder) ClearSyncBinaryData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSyncBinaryData", reflect.TypeOf((*Mockstorage)(nil).ClearSyncBinaryData))
}

// ClearSyncCards mocks base method.
func (m *Mockstorage) ClearSyncCards() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearSyncCards")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearSyncCards indicates an expected call of ClearSyncCards.
func (mr *MockstorageMockRecorder) ClearSyncCards() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSyncCards", reflect.TypeOf((*Mockstorage)(nil).ClearSyncCards))
}

// ClearSyncCredentials mocks base method.
func (m *Mockstorage) ClearSyncCredentials() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearSyncCredentials")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearSyncCredentials indicates an expected call of ClearSyncCredentials.
func (mr *MockstorageMockRecorder) ClearSyncCredentials() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSyncCredentials", reflect.TypeOf((*Mockstorage)(nil).ClearSyncCredentials))
}

// ClearSyncTextData mocks base method.
func (m *Mockstorage) ClearSyncTextData() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ClearSyncTextData")
	ret0, _ := ret[0].(error)
	return ret0
}

// ClearSyncTextData indicates an expected call of ClearSyncTextData.
func (mr *MockstorageMockRecorder) ClearSyncTextData() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearSyncTextData", reflect.TypeOf((*Mockstorage)(nil).ClearSyncTextData))
}

// GetAllSync mocks base method.
func (m *Mockstorage) GetAllSync() ([]*SyncModel, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllSync")
	ret0, _ := ret[0].([]*SyncModel)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllSync indicates an expected call of GetAllSync.
func (mr *MockstorageMockRecorder) GetAllSync() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllSync", reflect.TypeOf((*Mockstorage)(nil).GetAllSync))
}

// GetDataBinaryData mocks base method.
func (m *Mockstorage) GetDataBinaryData(userID, taskID int) (*BinaryData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataBinaryData", userID, taskID)
	ret0, _ := ret[0].(*BinaryData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataBinaryData indicates an expected call of GetDataBinaryData.
func (mr *MockstorageMockRecorder) GetDataBinaryData(userID, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataBinaryData", reflect.TypeOf((*Mockstorage)(nil).GetDataBinaryData), userID, taskID)
}

// GetDataCards mocks base method.
func (m *Mockstorage) GetDataCards(userID, taskID int) (*Cards, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataCards", userID, taskID)
	ret0, _ := ret[0].(*Cards)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataCards indicates an expected call of GetDataCards.
func (mr *MockstorageMockRecorder) GetDataCards(userID, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataCards", reflect.TypeOf((*Mockstorage)(nil).GetDataCards), userID, taskID)
}

// GetDataCredentials mocks base method.
func (m *Mockstorage) GetDataCredentials(userID, taskID int) (*Credentials, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataCredentials", userID, taskID)
	ret0, _ := ret[0].(*Credentials)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataCredentials indicates an expected call of GetDataCredentials.
func (mr *MockstorageMockRecorder) GetDataCredentials(userID, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataCredentials", reflect.TypeOf((*Mockstorage)(nil).GetDataCredentials), userID, taskID)
}

// GetDataTextData mocks base method.
func (m *Mockstorage) GetDataTextData(userID, taskID int) (*TextData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDataTextData", userID, taskID)
	ret0, _ := ret[0].(*TextData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDataTextData indicates an expected call of GetDataTextData.
func (mr *MockstorageMockRecorder) GetDataTextData(userID, taskID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDataTextData", reflect.TypeOf((*Mockstorage)(nil).GetDataTextData), userID, taskID)
}

// GetTokenWithUserID mocks base method.
func (m *Mockstorage) GetTokenWithUserID(ctx context.Context, userID int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTokenWithUserID", ctx, userID)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTokenWithUserID indicates an expected call of GetTokenWithUserID.
func (mr *MockstorageMockRecorder) GetTokenWithUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTokenWithUserID", reflect.TypeOf((*Mockstorage)(nil).GetTokenWithUserID), ctx, userID)
}

// MockrepoSync is a mock of repoSync interface.
type MockrepoSync struct {
	ctrl     *gomock.Controller
	recorder *MockrepoSyncMockRecorder
}

// MockrepoSyncMockRecorder is the mock recorder for MockrepoSync.
type MockrepoSyncMockRecorder struct {
	mock *MockrepoSync
}

// NewMockrepoSync creates a new mock instance.
func NewMockrepoSync(ctrl *gomock.Controller) *MockrepoSync {
	mock := &MockrepoSync{ctrl: ctrl}
	mock.recorder = &MockrepoSyncMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockrepoSync) EXPECT() *MockrepoSyncMockRecorder {
	return m.recorder
}

// SyncBinaryData mocks base method.
func (m *MockrepoSync) SyncBinaryData(ctx context.Context, conn *grpc.ClientConn, data []*BinaryData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncBinaryData", ctx, conn, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncBinaryData indicates an expected call of SyncBinaryData.
func (mr *MockrepoSyncMockRecorder) SyncBinaryData(ctx, conn, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncBinaryData", reflect.TypeOf((*MockrepoSync)(nil).SyncBinaryData), ctx, conn, data)
}

// SyncCards mocks base method.
func (m *MockrepoSync) SyncCards(ctx context.Context, conn *grpc.ClientConn, data []*Cards) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncCards", ctx, conn, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncCards indicates an expected call of SyncCards.
func (mr *MockrepoSyncMockRecorder) SyncCards(ctx, conn, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCards", reflect.TypeOf((*MockrepoSync)(nil).SyncCards), ctx, conn, data)
}

// SyncCredentials mocks base method.
func (m *MockrepoSync) SyncCredentials(ctx context.Context, conn *grpc.ClientConn, data []*Credentials) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncCredentials", ctx, conn, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncCredentials indicates an expected call of SyncCredentials.
func (mr *MockrepoSyncMockRecorder) SyncCredentials(ctx, conn, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncCredentials", reflect.TypeOf((*MockrepoSync)(nil).SyncCredentials), ctx, conn, data)
}

// SyncTextData mocks base method.
func (m *MockrepoSync) SyncTextData(ctx context.Context, conn *grpc.ClientConn, data []*TextData) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SyncTextData", ctx, conn, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SyncTextData indicates an expected call of SyncTextData.
func (mr *MockrepoSyncMockRecorder) SyncTextData(ctx, conn, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SyncTextData", reflect.TypeOf((*MockrepoSync)(nil).SyncTextData), ctx, conn, data)
}

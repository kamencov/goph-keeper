// Code generated by MockGen. DO NOT EDIT.
// Source: auth.go

// Package auth_client is a generated GoMock package.
package auth_client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// GetUserIDWithLogin mocks base method.
func (m *Mockstorage) GetUserIDWithLogin(ctx context.Context, login string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDWithLogin", ctx, login)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDWithLogin indicates an expected call of GetUserIDWithLogin.
func (mr *MockstorageMockRecorder) GetUserIDWithLogin(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDWithLogin", reflect.TypeOf((*Mockstorage)(nil).GetUserIDWithLogin), ctx, login)
}

// GetUserPassword mocks base method.
func (m *Mockstorage) GetUserPassword(ctx context.Context, login string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPassword", ctx, login)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPassword indicates an expected call of GetUserPassword.
func (mr *MockstorageMockRecorder) GetUserPassword(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPassword", reflect.TypeOf((*Mockstorage)(nil).GetUserPassword), ctx, login)
}

// GetUserToken mocks base method.
func (m *Mockstorage) GetUserToken(ctx context.Context, login string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserToken", ctx, login)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserToken indicates an expected call of GetUserToken.
func (mr *MockstorageMockRecorder) GetUserToken(ctx, login interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserToken", reflect.TypeOf((*Mockstorage)(nil).GetUserToken), ctx, login)
}

// SaveLoginAndToken mocks base method.
func (m *Mockstorage) SaveLoginAndToken(ctx context.Context, login, password, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLoginAndToken", ctx, login, password, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLoginAndToken indicates an expected call of SaveLoginAndToken.
func (mr *MockstorageMockRecorder) SaveLoginAndToken(ctx, login, password, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLoginAndToken", reflect.TypeOf((*Mockstorage)(nil).SaveLoginAndToken), ctx, login, password, token)
}

// UpdateLoginAndToken mocks base method.
func (m *Mockstorage) UpdateLoginAndToken(ctx context.Context, userID int, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLoginAndToken", ctx, userID, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateLoginAndToken indicates an expected call of UpdateLoginAndToken.
func (mr *MockstorageMockRecorder) UpdateLoginAndToken(ctx, userID, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLoginAndToken", reflect.TypeOf((*Mockstorage)(nil).UpdateLoginAndToken), ctx, userID, token)
}

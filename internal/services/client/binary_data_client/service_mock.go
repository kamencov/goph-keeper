// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package binary_data_client is a generated GoMock package.
package binary_data_client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockstorageClient is a mock of storageClient interface.
type MockstorageClient struct {
	ctrl     *gomock.Controller
	recorder *MockstorageClientMockRecorder
}

// MockstorageClientMockRecorder is the mock recorder for MockstorageClient.
type MockstorageClientMockRecorder struct {
	mock *MockstorageClient
}

// NewMockstorageClient creates a new mock instance.
func NewMockstorageClient(ctrl *gomock.Controller) *MockstorageClient {
	mock := &MockstorageClient{ctrl: ctrl}
	mock.recorder = &MockstorageClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstorageClient) EXPECT() *MockstorageClientMockRecorder {
	return m.recorder
}

// GetIDTaskBinary mocks base method.
func (m *MockstorageClient) GetIDTaskBinary(ctx context.Context, tableName string, userID int, task string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDTaskBinary", ctx, tableName, userID, task)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDTaskBinary indicates an expected call of GetIDTaskBinary.
func (mr *MockstorageClientMockRecorder) GetIDTaskBinary(ctx, tableName, userID, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDTaskBinary", reflect.TypeOf((*MockstorageClient)(nil).GetIDTaskBinary), ctx, tableName, userID, task)
}

// GetUserIDWithToken mocks base method.
func (m *MockstorageClient) GetUserIDWithToken(ctx context.Context, token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDWithToken", ctx, token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDWithToken indicates an expected call of GetUserIDWithToken.
func (mr *MockstorageClientMockRecorder) GetUserIDWithToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDWithToken", reflect.TypeOf((*MockstorageClient)(nil).GetUserIDWithToken), ctx, token)
}

// SaveBinaryDataInDatabase mocks base method.
func (m *MockstorageClient) SaveBinaryDataInDatabase(ctx context.Context, userID int, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBinaryDataInDatabase", ctx, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBinaryDataInDatabase indicates an expected call of SaveBinaryDataInDatabase.
func (mr *MockstorageClientMockRecorder) SaveBinaryDataInDatabase(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBinaryDataInDatabase", reflect.TypeOf((*MockstorageClient)(nil).SaveBinaryDataInDatabase), ctx, userID, data)
}

// SaveSync mocks base method.
func (m *MockstorageClient) SaveSync(ctx context.Context, tableName string, userID, taskID int, action string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSync", ctx, tableName, userID, taskID, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSync indicates an expected call of SaveSync.
func (mr *MockstorageClientMockRecorder) SaveSync(ctx, tableName, userID, taskID, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSync", reflect.TypeOf((*MockstorageClient)(nil).SaveSync), ctx, tableName, userID, taskID, action)
}

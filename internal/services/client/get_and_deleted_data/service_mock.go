// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package get_and_deleted_data is a generated GoMock package.
package get_and_deleted_data

import (
	context "context"
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockstorage is a mock of storage interface.
type Mockstorage struct {
	ctrl     *gomock.Controller
	recorder *MockstorageMockRecorder
}

// MockstorageMockRecorder is the mock recorder for Mockstorage.
type MockstorageMockRecorder struct {
	mock *Mockstorage
}

// NewMockstorage creates a new mock instance.
func NewMockstorage(ctrl *gomock.Controller) *Mockstorage {
	mock := &Mockstorage{ctrl: ctrl}
	mock.recorder = &MockstorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockstorage) EXPECT() *MockstorageMockRecorder {
	return m.recorder
}

// Deleted mocks base method.
func (m *Mockstorage) Deleted(ctx context.Context, tableName string, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deleted", ctx, tableName, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deleted indicates an expected call of Deleted.
func (mr *MockstorageMockRecorder) Deleted(ctx, tableName, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deleted", reflect.TypeOf((*Mockstorage)(nil).Deleted), ctx, tableName, id)
}

// GetAll mocks base method.
func (m *Mockstorage) GetAll(ctx context.Context, userID int, tableName string) (*sql.Rows, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll", ctx, userID, tableName)
	ret0, _ := ret[0].(*sql.Rows)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll.
func (mr *MockstorageMockRecorder) GetAll(ctx, userID, tableName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*Mockstorage)(nil).GetAll), ctx, userID, tableName)
}

// GetUserIDWithToken mocks base method.
func (m *Mockstorage) GetUserIDWithToken(ctx context.Context, token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDWithToken", ctx, token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDWithToken indicates an expected call of GetUserIDWithToken.
func (mr *MockstorageMockRecorder) GetUserIDWithToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDWithToken", reflect.TypeOf((*Mockstorage)(nil).GetUserIDWithToken), ctx, token)
}

// SaveSync mocks base method.
func (m *Mockstorage) SaveSync(ctx context.Context, tableName string, userID, taskID int, action string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSync", ctx, tableName, userID, taskID, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSync indicates an expected call of SaveSync.
func (mr *MockstorageMockRecorder) SaveSync(ctx, tableName, userID, taskID, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSync", reflect.TypeOf((*Mockstorage)(nil).SaveSync), ctx, tableName, userID, taskID, action)
}

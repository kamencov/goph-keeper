// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package credentials_client is a generated GoMock package.
package credentials_client

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockcredentialsClient is a mock of credentialsClient interface.
type MockcredentialsClient struct {
	ctrl     *gomock.Controller
	recorder *MockcredentialsClientMockRecorder
}

// MockcredentialsClientMockRecorder is the mock recorder for MockcredentialsClient.
type MockcredentialsClientMockRecorder struct {
	mock *MockcredentialsClient
}

// NewMockcredentialsClient creates a new mock instance.
func NewMockcredentialsClient(ctrl *gomock.Controller) *MockcredentialsClient {
	mock := &MockcredentialsClient{ctrl: ctrl}
	mock.recorder = &MockcredentialsClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockcredentialsClient) EXPECT() *MockcredentialsClientMockRecorder {
	return m.recorder
}

// GetIDTaskCredentials mocks base method.
func (m *MockcredentialsClient) GetIDTaskCredentials(ctx context.Context, tableName string, userID int, task string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIDTaskCredentials", ctx, tableName, userID, task)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetIDTaskCredentials indicates an expected call of GetIDTaskCredentials.
func (mr *MockcredentialsClientMockRecorder) GetIDTaskCredentials(ctx, tableName, userID, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIDTaskCredentials", reflect.TypeOf((*MockcredentialsClient)(nil).GetIDTaskCredentials), ctx, tableName, userID, task)
}

// GetUserIDWithToken mocks base method.
func (m *MockcredentialsClient) GetUserIDWithToken(ctx context.Context, token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDWithToken", ctx, token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDWithToken indicates an expected call of GetUserIDWithToken.
func (mr *MockcredentialsClientMockRecorder) GetUserIDWithToken(ctx, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDWithToken", reflect.TypeOf((*MockcredentialsClient)(nil).GetUserIDWithToken), ctx, token)
}

// SaveLoginAndPasswordInCredentials mocks base method.
func (m *MockcredentialsClient) SaveLoginAndPasswordInCredentials(ctx context.Context, userID int, resource, login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLoginAndPasswordInCredentials", ctx, userID, resource, login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLoginAndPasswordInCredentials indicates an expected call of SaveLoginAndPasswordInCredentials.
func (mr *MockcredentialsClientMockRecorder) SaveLoginAndPasswordInCredentials(ctx, userID, resource, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLoginAndPasswordInCredentials", reflect.TypeOf((*MockcredentialsClient)(nil).SaveLoginAndPasswordInCredentials), ctx, userID, resource, login, password)
}

// SaveSync mocks base method.
func (m *MockcredentialsClient) SaveSync(ctx context.Context, tableName string, userID, taskID int, action string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveSync", ctx, tableName, userID, taskID, action)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveSync indicates an expected call of SaveSync.
func (mr *MockcredentialsClientMockRecorder) SaveSync(ctx, tableName, userID, taskID, action interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveSync", reflect.TypeOf((*MockcredentialsClient)(nil).SaveSync), ctx, tableName, userID, taskID, action)
}

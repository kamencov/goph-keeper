// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package text_data is a generated GoMock package.
package text_data

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockstorageTextData is a mock of storageTextData interface.
type MockstorageTextData struct {
	ctrl     *gomock.Controller
	recorder *MockstorageTextDataMockRecorder
}

// MockstorageTextDataMockRecorder is the mock recorder for MockstorageTextData.
type MockstorageTextDataMockRecorder struct {
	mock *MockstorageTextData
}

// NewMockstorageTextData creates a new mock instance.
func NewMockstorageTextData(ctrl *gomock.Controller) *MockstorageTextData {
	mock := &MockstorageTextData{ctrl: ctrl}
	mock.recorder = &MockstorageTextDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstorageTextData) EXPECT() *MockstorageTextDataMockRecorder {
	return m.recorder
}

// DeletedText mocks base method.
func (m *MockstorageTextData) DeletedText(ctx context.Context, userID int, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletedText", ctx, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletedText indicates an expected call of DeletedText.
func (mr *MockstorageTextDataMockRecorder) DeletedText(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletedText", reflect.TypeOf((*MockstorageTextData)(nil).DeletedText), ctx, userID, data)
}

// GetUserIDByToken mocks base method.
func (m *MockstorageTextData) GetUserIDByToken(ctx context.Context, accessToken string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByToken", ctx, accessToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByToken indicates an expected call of GetUserIDByToken.
func (mr *MockstorageTextDataMockRecorder) GetUserIDByToken(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByToken", reflect.TypeOf((*MockstorageTextData)(nil).GetUserIDByToken), ctx, accessToken)
}

// SaveTextDataPstgres mocks base method.
func (m *MockstorageTextData) SaveTextDataPstgres(ctx context.Context, userID int, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTextDataPstgres", ctx, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTextDataPstgres indicates an expected call of SaveTextDataPstgres.
func (mr *MockstorageTextDataMockRecorder) SaveTextDataPstgres(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTextDataPstgres", reflect.TypeOf((*MockstorageTextData)(nil).SaveTextDataPstgres), ctx, userID, data)
}

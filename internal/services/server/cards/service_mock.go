// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package cards is a generated GoMock package.
package cards

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockstorageCards is a mock of storageCards interface.
type MockstorageCards struct {
	ctrl     *gomock.Controller
	recorder *MockstorageCardsMockRecorder
}

// MockstorageCardsMockRecorder is the mock recorder for MockstorageCards.
type MockstorageCardsMockRecorder struct {
	mock *MockstorageCards
}

// NewMockstorageCards creates a new mock instance.
func NewMockstorageCards(ctrl *gomock.Controller) *MockstorageCards {
	mock := &MockstorageCards{ctrl: ctrl}
	mock.recorder = &MockstorageCardsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockstorageCards) EXPECT() *MockstorageCardsMockRecorder {
	return m.recorder
}

// DeletedCards mocks base method.
func (m *MockstorageCards) DeletedCards(ctx context.Context, userID int, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletedCards", ctx, userID, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletedCards indicates an expected call of DeletedCards.
func (mr *MockstorageCardsMockRecorder) DeletedCards(ctx, userID, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletedCards", reflect.TypeOf((*MockstorageCards)(nil).DeletedCards), ctx, userID, data)
}

// GetUserIDByToken mocks base method.
func (m *MockstorageCards) GetUserIDByToken(ctx context.Context, accessToken string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByToken", ctx, accessToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByToken indicates an expected call of GetUserIDByToken.
func (mr *MockstorageCardsMockRecorder) GetUserIDByToken(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByToken", reflect.TypeOf((*MockstorageCards)(nil).GetUserIDByToken), ctx, accessToken)
}

// SaveCards mocks base method.
func (m *MockstorageCards) SaveCards(ctx context.Context, userID int, cards string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCards", ctx, userID, cards)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCards indicates an expected call of SaveCards.
func (mr *MockstorageCardsMockRecorder) SaveCards(ctx, userID, cards interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCards", reflect.TypeOf((*MockstorageCards)(nil).SaveCards), ctx, userID, cards)
}

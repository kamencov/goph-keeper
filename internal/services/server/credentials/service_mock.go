// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package credentials is a generated GoMock package.
package credentials

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// Mockcredentials is a mock of credentials interface.
type Mockcredentials struct {
	ctrl     *gomock.Controller
	recorder *MockcredentialsMockRecorder
}

// MockcredentialsMockRecorder is the mock recorder for Mockcredentials.
type MockcredentialsMockRecorder struct {
	mock *Mockcredentials
}

// NewMockcredentials creates a new mock instance.
func NewMockcredentials(ctrl *gomock.Controller) *Mockcredentials {
	mock := &Mockcredentials{ctrl: ctrl}
	mock.recorder = &MockcredentialsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *Mockcredentials) EXPECT() *MockcredentialsMockRecorder {
	return m.recorder
}

// DeletedCredentials mocks base method.
func (m *Mockcredentials) DeletedCredentials(ctx context.Context, userID int, resource string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeletedCredentials", ctx, userID, resource)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeletedCredentials indicates an expected call of DeletedCredentials.
func (mr *MockcredentialsMockRecorder) DeletedCredentials(ctx, userID, resource interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeletedCredentials", reflect.TypeOf((*Mockcredentials)(nil).DeletedCredentials), ctx, userID, resource)
}

// GetUserIDByToken mocks base method.
func (m *Mockcredentials) GetUserIDByToken(ctx context.Context, accessToken string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserIDByToken", ctx, accessToken)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserIDByToken indicates an expected call of GetUserIDByToken.
func (mr *MockcredentialsMockRecorder) GetUserIDByToken(ctx, accessToken interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserIDByToken", reflect.TypeOf((*Mockcredentials)(nil).GetUserIDByToken), ctx, accessToken)
}

// ServerSaveLoginAndPasswordInCredentials mocks base method.
func (m *Mockcredentials) ServerSaveLoginAndPasswordInCredentials(ctx context.Context, userID int, resource, login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServerSaveLoginAndPasswordInCredentials", ctx, userID, resource, login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// ServerSaveLoginAndPasswordInCredentials indicates an expected call of ServerSaveLoginAndPasswordInCredentials.
func (mr *MockcredentialsMockRecorder) ServerSaveLoginAndPasswordInCredentials(ctx, userID, resource, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServerSaveLoginAndPasswordInCredentials", reflect.TypeOf((*Mockcredentials)(nil).ServerSaveLoginAndPasswordInCredentials), ctx, userID, resource, login, password)
}

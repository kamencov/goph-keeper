// Code generated by MockGen. DO NOT EDIT.
// Source: handlers.go

// Package handlers is a generated GoMock package.
package handlers

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockserviceCredentials is a mock of serviceCredentials interface.
type MockserviceCredentials struct {
	ctrl     *gomock.Controller
	recorder *MockserviceCredentialsMockRecorder
}

// MockserviceCredentialsMockRecorder is the mock recorder for MockserviceCredentials.
type MockserviceCredentialsMockRecorder struct {
	mock *MockserviceCredentials
}

// NewMockserviceCredentials creates a new mock instance.
func NewMockserviceCredentials(ctrl *gomock.Controller) *MockserviceCredentials {
	mock := &MockserviceCredentials{ctrl: ctrl}
	mock.recorder = &MockserviceCredentialsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserviceCredentials) EXPECT() *MockserviceCredentialsMockRecorder {
	return m.recorder
}

// SaveLoginAndPassword mocks base method.
func (m *MockserviceCredentials) SaveLoginAndPassword(ctx context.Context, token, resource, login, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveLoginAndPassword", ctx, token, resource, login, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveLoginAndPassword indicates an expected call of SaveLoginAndPassword.
func (mr *MockserviceCredentialsMockRecorder) SaveLoginAndPassword(ctx, token, resource, login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveLoginAndPassword", reflect.TypeOf((*MockserviceCredentials)(nil).SaveLoginAndPassword), ctx, token, resource, login, password)
}

// MockserviceTextData is a mock of serviceTextData interface.
type MockserviceTextData struct {
	ctrl     *gomock.Controller
	recorder *MockserviceTextDataMockRecorder
}

// MockserviceTextDataMockRecorder is the mock recorder for MockserviceTextData.
type MockserviceTextDataMockRecorder struct {
	mock *MockserviceTextData
}

// NewMockserviceTextData creates a new mock instance.
func NewMockserviceTextData(ctrl *gomock.Controller) *MockserviceTextData {
	mock := &MockserviceTextData{ctrl: ctrl}
	mock.recorder = &MockserviceTextDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserviceTextData) EXPECT() *MockserviceTextDataMockRecorder {
	return m.recorder
}

// SaveTextData mocks base method.
func (m *MockserviceTextData) SaveTextData(ctx context.Context, token, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveTextData", ctx, token, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveTextData indicates an expected call of SaveTextData.
func (mr *MockserviceTextDataMockRecorder) SaveTextData(ctx, token, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveTextData", reflect.TypeOf((*MockserviceTextData)(nil).SaveTextData), ctx, token, data)
}

// MockserviceBinaryData is a mock of serviceBinaryData interface.
type MockserviceBinaryData struct {
	ctrl     *gomock.Controller
	recorder *MockserviceBinaryDataMockRecorder
}

// MockserviceBinaryDataMockRecorder is the mock recorder for MockserviceBinaryData.
type MockserviceBinaryDataMockRecorder struct {
	mock *MockserviceBinaryData
}

// NewMockserviceBinaryData creates a new mock instance.
func NewMockserviceBinaryData(ctrl *gomock.Controller) *MockserviceBinaryData {
	mock := &MockserviceBinaryData{ctrl: ctrl}
	mock.recorder = &MockserviceBinaryDataMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserviceBinaryData) EXPECT() *MockserviceBinaryDataMockRecorder {
	return m.recorder
}

// SaveBinaryData mocks base method.
func (m *MockserviceBinaryData) SaveBinaryData(ctx context.Context, token, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBinaryData", ctx, token, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBinaryData indicates an expected call of SaveBinaryData.
func (mr *MockserviceBinaryDataMockRecorder) SaveBinaryData(ctx, token, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBinaryData", reflect.TypeOf((*MockserviceBinaryData)(nil).SaveBinaryData), ctx, token, data)
}

// MockserviceCards is a mock of serviceCards interface.
type MockserviceCards struct {
	ctrl     *gomock.Controller
	recorder *MockserviceCardsMockRecorder
}

// MockserviceCardsMockRecorder is the mock recorder for MockserviceCards.
type MockserviceCardsMockRecorder struct {
	mock *MockserviceCards
}

// NewMockserviceCards creates a new mock instance.
func NewMockserviceCards(ctrl *gomock.Controller) *MockserviceCards {
	mock := &MockserviceCards{ctrl: ctrl}
	mock.recorder = &MockserviceCardsMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockserviceCards) EXPECT() *MockserviceCardsMockRecorder {
	return m.recorder
}

// SaveCards mocks base method.
func (m *MockserviceCards) SaveCards(ctx context.Context, token, data string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveCards", ctx, token, data)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveCards indicates an expected call of SaveCards.
func (mr *MockserviceCardsMockRecorder) SaveCards(ctx, token, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveCards", reflect.TypeOf((*MockserviceCards)(nil).SaveCards), ctx, token, data)
}

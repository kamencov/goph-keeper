// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/goph_keeper_v1.Auth/Auth": {
            "post": {
                "description": "Авторизует пользователя.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "POST"
                ],
                "summary": "Авторизует пользователя.",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1_pd.AuthRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1_pd.AuthResponse"
                        }
                    },
                    "400": {
                        "description": "password or login is empty"
                    },
                    "401": {
                        "description": "password is not correct"
                    },
                    "404": {
                        "description": "login is not correct"
                    },
                    "500": {
                        "description": "failed to auth user"
                    }
                }
            }
        },
        "/goph_keeper_v1.Health/Health": {
            "get": {
                "description": "Проверяет работоспособность сервиса.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "GET"
                ],
                "summary": "Проверяет работоспособность сервиса.",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1_pd.Empty"
                        }
                    }
                }
            }
        },
        "/goph_keeper_v1.SyncFromClient/Register": {
            "post": {
                "description": "Регистрация пользователя.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "POST"
                ],
                "summary": "Регистрация пользователя.",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1_pd.RegisterRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1_pd.RegisterResponse"
                        }
                    },
                    "500": {
                        "description": "failed to register user"
                    }
                }
            }
        },
        "/goph_keeper_v1.SyncFromClient/SyncFromClientBinaryData": {
            "post": {
                "description": "Синхронизирует бинарные данные. Выполняя действия, такие как сохранение или удаление, на основе указанных задач.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "POST"
                ],
                "summary": "Синхронизирует бинарные данные.",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1_pd.SyncFromClientBinaryDataRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1_pd.Empty"
                        }
                    },
                    "500": {
                        "description": "failed to deleted"
                    }
                }
            }
        },
        "/goph_keeper_v1.SyncFromClient/SyncFromClientCards": {
            "post": {
                "description": "Синхронизирует карты. Выполняя действия, такие как сохранение или удаление, на основе указанных задач.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "POST"
                ],
                "summary": "Синхронизирует карты.",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1_pd.SyncFromClientCardsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1_pd.Empty"
                        }
                    },
                    "500": {
                        "description": "failed to deleted"
                    }
                }
            }
        },
        "/goph_keeper_v1.SyncFromClient/SyncFromClientCredentials": {
            "post": {
                "description": "Синхронизирует учётные данные. Выполняя действия, такие как сохранение или удаление, на основе указанных задач.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "POST"
                ],
                "summary": "Синхронизирует учётные данные.",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1_pd.SyncFromClientCredentialsRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1_pd.Empty"
                        }
                    },
                    "500": {
                        "description": "failed to deleted"
                    }
                }
            }
        },
        "/goph_keeper_v1.SyncFromClient/SyncFromClientTextData": {
            "post": {
                "description": "Синхронизирует текстовые данные. Выполняя действия, такие как сохранение или удаление, на основе указанных задач.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "POST"
                ],
                "summary": "Синхронизирует текстовые данные.",
                "parameters": [
                    {
                        "description": "request",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/v1_pd.SyncFromClientTextDataRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/v1_pd.Empty"
                        }
                    },
                    "500": {
                        "description": "failed to deleted"
                    }
                }
            }
        }
    },
    "definitions": {
        "v1_pd.AuthRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "v1_pd.AuthResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "token": {
                    "type": "string"
                }
            }
        },
        "v1_pd.BinaryData": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "action": {
                    "type": "string"
                },
                "binary": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "id_user": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "v1_pd.Cards": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "action": {
                    "type": "string"
                },
                "cards": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "id_user": {
                    "type": "integer"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "v1_pd.Credentials": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "action": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "id_user": {
                    "type": "integer"
                },
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                },
                "resource": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "v1_pd.Empty": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        },
        "v1_pd.RegisterRequest": {
            "type": "object",
            "properties": {
                "login": {
                    "type": "string"
                },
                "password": {
                    "type": "string"
                }
            }
        },
        "v1_pd.RegisterResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                },
                "uid": {
                    "type": "integer"
                }
            }
        },
        "v1_pd.SyncFromClientBinaryDataRequest": {
            "type": "object",
            "properties": {
                "task": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1_pd.BinaryData"
                    }
                }
            }
        },
        "v1_pd.SyncFromClientCardsRequest": {
            "type": "object",
            "properties": {
                "task": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1_pd.Cards"
                    }
                }
            }
        },
        "v1_pd.SyncFromClientCredentialsRequest": {
            "type": "object",
            "properties": {
                "task": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1_pd.Credentials"
                    }
                }
            }
        },
        "v1_pd.SyncFromClientTextDataRequest": {
            "type": "object",
            "properties": {
                "task": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/v1_pd.TextData"
                    }
                }
            }
        },
        "v1_pd.TextData": {
            "type": "object",
            "properties": {
                "access_token": {
                    "type": "string"
                },
                "action": {
                    "type": "string"
                },
                "id": {
                    "type": "integer"
                },
                "id_user": {
                    "type": "integer"
                },
                "text": {
                    "type": "string"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        }
    },
    "securityDefinitions": {
        "ApiKeyAuth": {
            "type": "apiKey",
            "name": "Authorization",
            "in": "header"
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8081",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "GophKeeper API",
	Description:      "API for GophKeeper service",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
